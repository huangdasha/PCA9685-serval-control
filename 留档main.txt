# -*- coding:UTF-8 -*-
import sys
import threading
import queue
import datetime
import json
import http.client
import threading
import time


sys.path.append(r'/home/yunle/yihao_workspace_py/src/communication/communication/TCPClient')
from server_client import Server_client

# 设置不过滤的文件列表
EXT = {"supervisord.pid", "supervisor.sock", "cron.log"}

def server_recive():
    while True:
        try:
            if server.Queue_rx.empty()!= True:
                jresp = server.Queue_rx.get()
                print(jresp)
                jresp = json.loads(jresp)
                print(jresp)
                if('deviceMac' in jresp.keys()):
                    if('requestType' in jresp.keys()):
                        temp = jresp['requestType']
                        print("temp:",temp)
                        if temp == 34:#修改設備定時開機時間 0x22
                            pass
                        elif temp == 35:#查询設備定時開機時間 0x23
                            pass
                        elif temp == 25:#卷板轉數清零
                            pass
                        elif temp == 37:#卷板转动测试   0x25
                            pass
                print("Recive:",jresp)
            time.sleep(1)

        except :
            pass

if __name__=="__main__":
    ################################################# TCP #####################################################
    # server = Server_client('116.62.141.147', 20068, False)
    server = Server_client('192.168.31.47', 18888, False) # 局域网的测试ip
    server.serverConnect()
    try:
        while True:
            # 检查接收队列是否有数据
            if not server.Queue_rx.empty():
                received_data = server.Queue_rx.get()
                print("Received raw data:", received_data)

                try:
                    # 尝试解析为 JSON 格式
                    received_json = json.loads(received_data)
                    print("Parsed JSON data:", received_json)

                    # 构造简单的响应
                    response = {"response": "123"}
                    response_string = json.dumps(response)

                    # 发送响应
                    server.Instructions_send(response_string)
                    print("Sent response:", response_string)

                except json.JSONDecodeError:
                    print("Received data is not valid JSON:", received_data)

            time.sleep(1)  # 防止 CPU 过载

    except KeyboardInterrupt:
        print("Exiting program...")
        server.sock.close()  # 关闭连接
